"""
Django settings for dk_luxury_project project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os # Make sure 'import os' or 'from pathlib import Path' is at the top
from pathlib import Path
from dotenv import load_dotenv # Import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file variables into environment (only does something if .env exists)
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variable, raise error if not found in production
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    # Provide a default *only* if you absolutely need one for some reason,
    # but it's better to ensure it's set in the environment.
    # In production, your deployment platform *must* provide this.
    # For local, .env provides it.
    raise ValueError("No SECRET_KEY set for Django application")


# SECURITY WARNING: don't run with debug turned on in production!
# Get DEBUG from environment, default to False if not set. Convert string 'True' to boolean True.
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# Get ALLOWED_HOSTS from environment as a comma-separated string, then split it.
# Default to empty list if not set.
allowed_hosts_str = os.getenv('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]
# Important: For PythonAnywhere, you'll set this directly there


# Application definition

INSTALLED_APPS = [
        # My apps
    'services.apps.ServicesConfig', # Or just 'services'
    'contact.apps.ContactConfig',   # Or just 'contact'
    'pages.apps.PagesConfig',       # Or just 'pages'

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dk_luxury_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Add this line
        # Or using pathlib: 'DIRS': [BASE_DIR / 'templates'],],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]




WSGI_APPLICATION = 'dk_luxury_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# Add this: Tells Django where to find static files NOT tied to a specific app
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    # Or using pathlib: BASE_DIR / 'static',
]

# Optional: Where collectstatic will gather files for production
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_prod')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# Or using pathlib: MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email Configuration using environment variables
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587)) # Convert port to integer
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True' # Convert to boolean
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER') # Get from env
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') # Get from env
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER # Use the host user as default sender

# Email address that receives contact form submissions
CONTACT_FORM_RECIPIENT_EMAIL = os.getenv('CONTACT_FORM_RECIPIENT_EMAIL') # Get from env
